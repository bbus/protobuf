// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/protobuf/unittest_import_proto3.proto
namespace ProtobufUnittestImport

open Google.Protobuf
open Google.Protobuf.Reflection
open Google.Protobuf.Collections

type UnittestImportProto3Reflection() =
  static let descriptor =
    let descriptorData =
      System.Convert.FromBase64String(
          System.String.Concat(
              "Cixnb29nbGUvcHJvdG9idWYvdW5pdHRlc3RfaW1wb3J0X3Byb3RvMy5wcm90",
              "bxIYcHJvdG9idWZfdW5pdHRlc3RfaW1wb3J0GjNnb29nbGUvcHJvdG9idWYv",
              "dW5pdHRlc3RfaW1wb3J0X3B1YmxpY19wcm90bzMucHJvdG8iGgoNSW1wb3J0",
              "TWVzc2FnZRIJCgFkGAEgASgFKlkKCkltcG9ydEVudW0SGwoXSU1QT1JUX0VO",
              "VU1fVU5TUEVDSUZJRUQQABIOCgpJTVBPUlRfRk9PEAcSDgoKSU1QT1JUX0JB",
              "UhAIEg4KCklNUE9SVF9CQVoQCUI8Chhjb20uZ29vZ2xlLnByb3RvYnVmLnRl",
              "c3RIAfgBAaoCGkdvb2dsZS5Qcm90b2J1Zi5UZXN0UHJvdG9zUABiBnByb3Rv",
              "Mw=="))
    FileDescriptor.FromGeneratedCode(descriptorData,
        [| ProtobufUnittestImport.UnittestImportPublicProto3Reflection.Descriptor; |],
        new GeneratedClrTypeInfo(
          [|typeof<ImportEnum>; |],
          [|
            new GeneratedClrTypeInfo(typeof<ImportMessage>, ImportMessage.Parser, [| "D" |], null, null, null)
          |]))

  static member val Descriptor = descriptor

// #region Enums
and public ImportEnum =
  | [<OriginalName("IMPORT_ENUM_UNSPECIFIED")>] Unspecified = 0
  | [<OriginalName("IMPORT_FOO")>] ImportFoo = 7
  | [<OriginalName("IMPORT_BAR")>] ImportBar = 8
  | [<OriginalName("IMPORT_BAZ")>] ImportBaz = 9

// #endregion Enums

and [<AllowNullLiteral>] public ImportMessage =
  val mutable private d_ : int

  [<System.Diagnostics.DebuggerNonUserCodeAttribute>]
  new () =
    {
      d_ = Unchecked.defaultof<int>
    }

  [<System.Diagnostics.DebuggerNonUserCodeAttribute>]
  new (other: ImportMessage) =
    {
      d_ = other.d_
    }

  [<System.Diagnostics.DebuggerNonUserCodeAttribute>]
  static member Parser = new MessageParser<ImportMessage>(fun () -> new ImportMessage())

  [<System.Diagnostics.DebuggerNonUserCodeAttribute>]
  static member Descriptor = UnittestImportProto3Reflection.Descriptor.MessageTypes.[0]

  /// <summary>Field number for the "d" field.</summary>
  static member public DFieldNumber = 1
  [<System.Diagnostics.DebuggerNonUserCodeAttribute>]
  member public this.D
    with get() = this.d_
    and set(value: int) =
      this.d_ <- value


  [<System.Diagnostics.DebuggerNonUserCodeAttribute>]
  override this.Equals(other: System.Object) : bool =
    match other with
      | :? ImportMessage as x -> (x :> System.IEquatable<ImportMessage>).Equals(this)
      | _ -> false

  [<System.Diagnostics.DebuggerNonUserCodeAttribute>]
  override this.GetHashCode() : int =
    let mutable hash = 1
    if this.D <> 0 then hash <- hash ^^^ this.D.GetHashCode()
    hash

  [<System.Diagnostics.DebuggerNonUserCodeAttribute>]
  override this.ToString() =
    JsonFormatter.ToDiagnosticString(this)

  interface IMessage<ImportMessage> with
    [<System.Diagnostics.DebuggerNonUserCodeAttribute>]
    member this.WriteTo(output: CodedOutputStream) : unit =
      if this.D <> 0 then
        output.WriteRawTag(8uy)
        output.WriteInt32(this.D)


    [<System.Diagnostics.DebuggerNonUserCodeAttribute>]
    member this.CalculateSize() : int =
      let mutable size = 0
      if this.D <> 0 then
        size <- size + 1 + CodedOutputStream.ComputeInt32Size(this.D)
      size

    [<System.Diagnostics.DebuggerNonUserCodeAttribute>]
    member this.MergeFrom(other: ImportMessage) : unit =
      if not (System.Object.ReferenceEquals(other, null)) then
        if other.D <> 0 then
          this.D <- other.D

    [<System.Diagnostics.DebuggerNonUserCodeAttribute>]
    member this.MergeFrom(input: CodedInputStream) : unit =
      let mutable tag = input.ReadTag()
      while (tag <> 0u) do
        match tag with
          | 8u ->
            this.D <- input.ReadInt32()
          | _ ->
            input.SkipLastField()
        tag <- input.ReadTag()

    [<System.Diagnostics.DebuggerNonUserCodeAttribute>]
    member this.Clone() : ImportMessage =
      new ImportMessage(this)

    [<System.Diagnostics.DebuggerNonUserCodeAttribute>]
    member this.Equals(other: ImportMessage) : bool =
      if System.Object.ReferenceEquals(other, null) then
        false
      else if System.Object.ReferenceEquals(other, this) then
        true
      else if this.D <> other.D then false
      else true

    member this.Descriptor : Reflection.MessageDescriptor = ImportMessage.Descriptor


